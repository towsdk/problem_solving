1 2 // i= 0
1 2 // i=1
1 2 // i = 2   
1 2 // i = 3     
1 2 // i = 4     
1 2 // i = 5     
dp 5 2   


7 7      
dp 5 2   

30 15    
dp 5 2   

dp[i] 5 2 


dp 4 4   
7 7      
dp 4 4   
30 15    
dp 4 4   
dp[i] 4 4

dp 3 6   
7 7      
dp 3 6   
30 15
dp 3 6
dp[i] 3 6

dp 2 8
7 7
dp 2 8
30 15
dp 2 8
dp[i] 2 8

dp 1 10
7 7
dp 1 9
30 15
dp 1 9
dp[i] 1 9

dp 0 11
7 7
dp 0 11
30 15
dp 0 11
dp[i] 0 11

11




0 1 2
1 1 2  
2 1 2  
3 1 2  
4 1 2  
5 1 2  // first
5 7 7  // second
5 30 15 // third
5  

4 7 7  
4 30 15
4  

3 7 7  
3 30 15
3  

2 7 7  
2 30 15
2 

1 7 7  
1 30 15
1

0 7 7
0 30 15
0

11  

0 1 2
1 1 2  
2 1 2  // dp[2] = min(dp[2], c + dfs(3)) = 8
3 1 2  // dp[3] = min(dp[3], c + dfs(4)) = 6 
4 1 2  // dp[4] = min(dp[4], c + dfs(5)) = 4

5 1 2  //dp[5] = min(dp[5], c + dfs(6)=0) //= 2
5 7 7  //dp[5] = min(dp[5], c + dfs(6)=0) //= 7
5 30 15 // dp[5] = min(dp[5], c + dfs(6)=0) //= 15
5 & 2  

4 7 7  // dp[4] = min(dp[4], c + dfs(5)=2) = 4
4 30 15 // dp[4] = min(dp[4], c + dfs(5)= 2) = 4
4 & 4 

3 7 7 // dp[3] = min(dp[3], c + dfs(4)) = 6
3 30 15 // dp[3] = min(dp[3], c + dfs(4)) = 6
3 & 6 

2 7 7  
2 30 15
2 & 8 

1 7 7  
1 30 15
1 & 9

0 7 7
0 30 15
0 & 11
11


0 1 2
1 1 2  
2 1 2  
3 1 2  
4 1 2  
5 1 2  
c 2    
5 7 7  
c 2    
5 30 15
c 2  
5 & 2  

c 4    
4 7 7  
c 4
4 30 15
c 4
4 & 4
c 6
3 7 7
c 6
3 30 15
c 6
3 & 6
c 8
2 7 7
c 8
2 30 15
c 8
2 & 8
c 10
1 7 7
c 9
1 30 15
c 9
1 & 9
c 11
0 7 7
c 11
0 30 15
c 11
0 & 11
11


0 1 2
1 1 2  
2 1 2  
3 1 2  
4 1 2  
5 1 2 

c 2 0  
5 7 7  
c 2 0  
5 30 15
c 2 0  
5 & 2

c 4 2  
4 7 7  
c 4 2  
4 30 15
c 4 0  
4 & 4  
c 6 4
3 7 7
c 6 2
3 30 15
c 6 0
3 & 6
c 8 6
2 7 7
c 8 2
2 30 15
c 8 0
2 & 8
c 10 8
1 7 7
c 9 2
1 30 15
c 9 0
1 & 9
c 11 9
0 7 7
c 11 4
0 30 15
c 11 0
0 & 11
11



0 1 2
1 1 2
2 1 2
3 1 2
4 1 2

5 1 2
c 2 dp[i] 2 0
5 7 7
c 7 dp[i] 2 0
5 30 15
c 15 dp[i] 2 0
5 & 2

c 2 dp[i] 4 2
4 7 7
c 7 dp[i] 4 2
4 30 15
c 15 dp[i] 4 0
4 & 4
c 2 dp[i] 6 4
3 7 7
c 7 dp[i] 6 2
3 30 15
c 15 dp[i] 6 0
3 & 6
c 2 dp[i] 8 6
2 7 7
c 7 dp[i] 8 2
2 30 15
c 15 dp[i] 8 0
2 & 8
c 2 dp[i] 10 8
1 7 7
c 7 dp[i] 9 2
1 30 15
c 15 dp[i] 9 0
1 & 9
c 2 dp[i] 11 9
0 7 7
c 7 dp[i] 11 4
0 30 15
c 15 dp[i] 11 0
0 & 11
11

i 5 c= 2 d= 1 dfs[= 6 ] 0
i 5 c= 7 d= 7 dfs[= 6 ] 0
i 5 c= 15 d= 30 dfs[= 6 ] 0
5 & 2
i 4 c= 2 d= 1 dfs[= 5 ] 2
i 4 c= 7 d= 7 dfs[= 5 ] 2
i 4 c= 15 d= 30 dfs[= 6 ] 0
4 & 4
i 3 c= 2 d= 1 dfs[= 4 ] 4
i 3 c= 7 d= 7 dfs[= 5 ] 2
i 3 c= 15 d= 30 dfs[= 6 ] 0
3 & 6
i 2 c= 2 d= 1 dfs[= 3 ] 6
i 2 c= 7 d= 7 dfs[= 5 ] 2
i 2 c= 15 d= 30 dfs[= 6 ] 0
2 & 8
i 1 c= 2 d= 1 dfs[= 2 ] 8
i 1 c= 7 d= 7 dfs[= 5 ] 2
i 1 c= 15 d= 30 dfs[= 6 ] 0
1 & 9
i 0 c= 2 d= 1 dfs[= 1 ] 9
i 0 c= 7 d= 7 dfs[= 4 ] 4
i 0 c= 15 d= 30 dfs[= 6 ] 0
0 & 11
11



80. Remove Duplicates from sorted array I

1. nums = [1,2,3,3,3,4,4,5,5]
2. non-decreasing order
3. Remove some Duplicates
4. unique elements appears at most twice
5. relative order of the elements should same
6. final result k after removing Duplicates
=> k elements will set first 
7. space complexity - O(1)











































